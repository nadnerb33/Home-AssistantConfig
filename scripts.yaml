
watch_kodi:
  alias: Watch Kodi
  sequence:
  - service: script.turn_on
    entity_id: script.start_living_room
  - service: switch.turn_on
    entity_id: switch.living_room_power
  - data:
      source: Kodi
    service: script.wake_rxv481d
  - service: light.turn_on
    data:
      entity_id: light.hyperion
      effect: HDMI
  - delay: 00:00:10
  - service: hdmi_cec.power_on
    data:
      device: 0.0.0.0

watch_tv_x:
  alias: Watch TV x
  sequence:
  - service: script.turn_on
    entity_id: script.watch_tv
  - delay: 00:00:50
  - service: script.freesat_channel_x
    data_template:
      value: >
        {{value}}

watch_tv:
  alias: Watch TV
  sequence:
  - service: switch.turn_on
    entity_id: switch.freesat
  - service: script.turn_on
    entity_id: script.start_living_room
  - service: switch.turn_on
    entity_id: switch.living_room_power
  # - service: light.turn_on
  #   data:
  #     entity_id: light.hyperion
  #     rgb_color: [0,167,247]
  #     brightness: 150
  - data:
      source: Freesat
    service: script.wake_rxv481d
  - delay: 00:00:10
  - service: hdmi_cec.power_on
    data:
      device: 0.0.0.0


play_ps4:
  alias: Play PS4
  sequence:
  - service: script.turn_on
    entity_id: script.start_living_room
  - service: switch.turn_on
    entity_id: switch.living_room_power
  # - service: shell_command.switch_on_ps4 #add condition so this only runs if PS4 is off
  - service: ps4.send_command
    data:
      entity_id: media_player.playstation_4
      command: 'ps'
  - data:
      source: PS4
    service: script.wake_rxv481d
  - delay: 00:00:10
  - service: hdmi_cec.power_on
    data:
      device: 0.0.0.0

play_vinyl:
  alias: Play vinyl
  sequence:
  - service: switch.turn_on
    entity_id: switch.living_room_power
  - data:
      source: Vinyl
    service: script.wake_rxv481d


update_kodi_library:
  alias: Update Kodi Library
  sequence:
  - alias: Call Kodi update
    service: media_player.kodi_call_method
    data:
      entity_id: media_player.kodi
      method: VideoLibrary.Scan

xmas_lights:
  alias: Turn on xmas lights
  sequence:
  - service: switch.turn_on
    entity_id: switch.tradfri_outlet
  - service: media_player.play_media
    data_template:
      entity_id: media_player.living_room_speaker
      media_content_id: https://nadnerb.duckdns.org:8123/local/xmas.mp3
      media_content_type: audio/mp4

start_living_room:
  #this only runs if living room power isnt on yet, it just flashes the LEDs as this is the first time it starts.
  alias: Start Living Room
  sequence:
  - service: light.turn_on
    entity_id: light.living_room_lamp
  # - service: light.turn_on
  #   entity_id: light.living_room_lamp_2
  - service: switch.turn_on
    entity_id: switch.living_room_power
  # - service: switch.turn_on
  #   entity_id: switch.tradfri_outlet
  # - service: light.turn_on
  #   data:
  #     entity_id: light.hyperion
  #     effect: Rainbow swirl fast

ps4_start_x:
  alias: PS4 Start X
  sequence:
  - service: script.turn_on
    entity_id: script.start_living_room
  - service: media_player.select_source
    entity_id: media_player.playstation_4
    data_template:
      source: >
        {% if   (value == "Netflix")   %}  CUSA00127
        {% elif (value == "YouTube")   %}  CUSA01116
        {% elif (value == "Yakuza 0")  %}  CUSA05133
        {% elif (value == "Inside")    %}  CUSA02754
        {% elif (value == "In Side")   %}  CUSA02754
        {% elif (value == "Shenmue")   %}  CUSA08355
        {% elif (value == "Shenmue 2") %}  CUSA08356
        {% elif (value == "Shenmue 3") %}  CUSA12257
        {% elif (value == "shenmue 3") %}  CUSA12257
        {% elif (value == "iPlayer")   %}  CUSA00122
        {% elif (value.lower() == "red dead 2")%}  CUSA08519
        {% elif (value == "Red Dead Redemption 2") %}  CUSA08519
        {% elif (value == "Overcooked") %}  CUSA05399
        {% else %}  {{value}}
        {% endif %}
  - service: media_player.turn_on
    entity_id: media_player.yamaha_rxv481d
  - service: media_player.select_source
    entity_id: media_player.yamaha_rxv481d
    data_template:
      source: 'PS4'
  - delay: 00:00:10
  - service: hdmi_cec.power_on
    data:
      device: 0.0.0.0

yamaha_volume_x:
  alias: Change Yamaha Volume
  sequence:
  - service: media_player.volume_set
    entity_id: media_player.yamaha_rxv481d
    data_template:
      volume_level: >
        {% if   (value == "30") %} 0.7
        {% elif   (value == "13") %} 0.7
        {% elif (value == "35") %} 0.65
        {% elif (value == "40") %} 0.6
        {% elif (value == "14") %} 0.6
        {% elif (value == "45") %} 0.55
        {% elif (value == "50") %} 0.5
        {% elif (value == "15") %} 0.5
        {% elif (value == "55") %} 0.45
        {% endif %}

yamaha_source_x:
  alias: Switch Yamaha Source
  sequence:
  - service: media_player.select_source
    entity_id: media_player.yamaha_rxv481d
    # we need to account for variations in Google's spelling of the spoken phrases
    data_template:
      source: >
        {% if   (value == "PS 4")          %} HDMI4
        {% elif (value == "Playstation 4") %} HDMI4
        {% elif (value == "Chromecast")    %} HDMI1
        {% elif (value == "HDMI 1")        %} HDMI1
        {% elif (value == "HDMI 2")        %} HDMI2
        {% elif (value == "HDMI 3")        %} HDMI3
        {% elif (value == "HDMI 4")        %} HDMI4
        {% elif (value == "kodi")          %} HDMI3
        {% elif (value == "FREESAT")       %} HDMI2
        {% elif (value == "freesat")       %} HDMI2
        {% elif (value == "freezer")       %} HDMI2
        {% elif (value == "AV 3")          %} AV3
        {% elif (value == "AV free")       %} AV3
        {% elif (value == "rhino")         %} AV3
        {% elif (value == "vinyl")         %} AV3
        {% else %} {{value}}
        {% endif %}

yamaha_mute:
  alias: Mute Yamaha
  sequence:
  - service: media_player.volume_mute
    entity_id: media_player.yamaha_rxv481d
    data_template:
      is_volume_muted: >
        {% if (state_attr('media_player.yamaha_rxv481d' , 'is_volume_muted') == false)   %} true
        {% else  %} false
        {% endif %}

freesat_channel_x:
  alias: Switch Freesat Channel
  sequence:
    # we need to account for variations in Google's spelling of the spoken phrases
  - service: shell_command.switch_freesat_channel
    data_template:
      buttons: >
        {% if   (value.upper() == "BBC 1") %} 1 0 6
        {% elif (value.upper() == "BBC 2") %} 1 0 2
        {% elif (value.upper() == "BBC 4") %} 1 0 7
        {% elif (value.upper() == "CHANNEL 4") %} 1 0 4
        {% elif (value.upper() == "CHANNEL 5") %} 1 0 5
        {% elif (value.upper() == "ITV") %} 1 1 1
        {% elif (value.upper() == "NHK") %} 2 0 9
        {% elif (value.upper() == "BBC NEWS") %} 2 0 0
        {% elif (value.upper() == "SKY NEWS") %} 20 2
        {% elif (value.upper() == "PAUSE") %} Pause
        {% elif (value.upper() == "PLAY") %} Play
        {% elif (value.upper() == "RESUME") %} Play
        {% elif (value.upper() == "RECORD") %} Record
        {% elif (value.upper() == "MUTE") %} Mute
        {% elif (value.upper() == "UNMUTE") %} Mute
        {% elif (value.upper() == "INFO") %} i i ; sleep 8; irsend -d /var/run/lirc/lircd-lirc0 SEND_ONCE freesat Exit
        {% else %} {{value|title}}
        {% endif %}


shutdown_living_room:
  alias: Shutdown Living Room
  sequence:
  - service: media_player.play_media
    data_template:
      entity_id: media_player.living_room_speaker
      media_content_id: https://nadnerb.duckdns.org:8123/local/shutdown.mp3
      media_content_type: audio/mp4
  - service: hdmi_cec.standby
    data:
      device: 0.0.0.0 #tv?
  - service: hdmi_cec.standby
    data:
      device: 2.2.0.0 #freesat?
  # - service: light.turn_on
  #   data:
  #     entity_id: light.hyperion
  #     effect: Rainbow swirl slow
  - service: media_player.turn_off
    entity_id: media_player.tv
  - service: shell_command.switch_off_freesat
  # - service: shell_command.switch_off_ps4
  - service: media_player.turn_off
    entity_id: media_player.yamaha_rxv481d
  - service: media_player.turn_off
    entity_id: media_player.playstation_4
  # - service: light.turn_off
  #   data:
  #     entity_id: light.hyperion
  #- service: shell_command.stop_hyperiond
  # - service: shell_command.stop_kodi 
  - service: switch.turn_off
    entity_id: switch.living_room_power
  - delay: 00:00:10
  - service: light.turn_off
    entity_id: light.living_room_lamp
  # - service: light.turn_off
  #   entity_id: light.living_room_lamp_2
  # - service: switch.turn_off
  #   entity_id: switch.tradfri_outlet

# wtf is going on here? Well, these scripts fix some issues with the AVR.
# firstly, the AVR is only accesible to HA if it was on(or in standby) when HA first booted.
# so for this to work, each time HA is restarted the AVR should have power (and network standby be enabled)
# When power is switched on for the AVR then you have to wait in a loop for the AVR network to come up before you
# can access it, set source etc.
# the 3 scripts do this

# No1. this is called by other scripts. e.g "watch TV", or "play ps4"
# it will load another script which will attempt to turn on AVR
# it will then wait until the AVR then switches back to AV2 (a bug/quirk of ARC) before switching back to the required source
wake_rxv481d:
  alias: Wake Yamaha RXV481D with timeout
  sequence:
  # - data_template:
  #     source: '{{source}}'
  #   service: script.wake_rxv481d_action
  - service: media_player.turn_on
    entity_id: media_player.yamaha_rxv481d
  - service: media_player.select_source
    entity_id: media_player.yamaha_rxv481d
    data_template:
      source: '{{source}}'
  - wait_template: "{{ source != state_attr('media_player.yamaha_rxv481d' , 'source') }}" 
    timeout: 00:00:30
  #set source again
  - service: media_player.select_source
    entity_id: media_player.yamaha_rxv481d
    data_template:
      source: '{{source}}'
  - wait_template: "{{ source != state_attr('media_player.yamaha_rxv481d' , 'source') }}" 
    timeout: 00:00:30
  #set source again
  - service: media_player.select_source
    entity_id: media_player.yamaha_rxv481d
    data_template:
      source: '{{source}}'    

#No2. this is called by script no1.
# if the avr is on, then it will set the source and stop
# if not, it will try, fail and then start another script which will loop back to this one every 6 seconds
# if on a subsequent run through it turns on the AVR then the loop is stopped.
# could get stuck in a loop if it never turns on, could implement a counter and a maximum no of attempts?
wake_rxv481d_action:
  alias: Wake Yamaha RXV481D
  sequence:
  - service: switch.turn_off
    data:
      entity_id: switch.led
  - service: hdmi_cec.power_on
    data:
      device: 2.0.0.0
  - service: media_player.turn_on
    entity_id: media_player.yamaha_rxv481d
  - service: media_player.select_source
    # entity_id: media_player.yamaha_rxv481d
    data_template:
      source: '{{source}}'
  #was the switch on successful? if so quit, if not, continue
  - condition: state
    entity_id: media_player.yamaha_rxv481d
    state: 'off'
  # - service: switch.turn_on
  #   data:
  #     entity_id: switch.led
  - delay: 00:00:03
  - data_template:
      source: '{{source}}'
    service: script.wake_rxv481d_loop

#No3. just waits 2 secs then tries to turn on the AVR again
wake_rxv481d_loop:
  alias: Wake Yamaha RXV481D again
  sequence:
  - service: switch.turn_off
    data:
      entity_id: switch.led
  - delay: 00:00:02
  - service: switch.turn_on
    data:
      entity_id: switch.led
  - data_template:
      source: '{{source}}'
    service: script.wake_rxv481d


broadcast_via_googlehome:
  alias: Broadcast via GoogleHome
  sequence:
    - service: tts.google_translate_say
      data_template:
        entity_id: media_player.living_room_speaker
        message: "{{ what }}"
    - service: tts.google_translate_say
      data_template:
        entity_id: media_player.kitchen_speaker
        message: "{{ what }}"

